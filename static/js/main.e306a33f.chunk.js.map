{"version":3,"sources":["reducers/tasksReducer.js","contexts/TasksContext.js","components/Header.js","components/Task.js","components/TasksList.js","components/TaskForm.js","App.js","serviceWorker.js","index.js"],"names":["tasksReducer","state","action","type","name","task","urgency","id","Math","random","filter","TasksContext","createContext","TasksContextProvider","props","useReducer","tasks","dispatch","Provider","value","children","Header","useContext","className","length","Task","useState","color","setColor","useEffect","backgroundColors","style","backgroundColor","onClick","TasksList","map","key","TaskForm","setName","setUrgency","assignUrgency","e","preventDefault","target","placeholder","required","onChange","createTask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e306a33f.chunk.js","sourcesContent":["export const tasksReducer = (state, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'ADD_TASK':\r\n      return [...state, {\r\n        name: action.task.name, \r\n        urgency: action.task.urgency,\r\n        id: Math.random()}\r\n      ]\r\n    case 'DELETE_TASK':\r\n      return state.filter(task => task.id !== action.id);\r\n    default:\r\n      return state;\r\n  }\r\n\r\n} ","import React, { createContext, useReducer } from 'react'\r\nimport { tasksReducer } from '../reducers/tasksReducer'\r\n\r\nexport const TasksContext = createContext();\r\n\r\nconst TasksContextProvider = (props) => {\r\n\r\n  const [tasks, dispatch] = useReducer(tasksReducer, [\r\n    { name: \"Prepare dinner\", urgency: \"urgent\", id: 1 },\r\n    { name: \"Organize bedroom\", urgency: \"not_urgent\", id: 2 },\r\n    { name: \"Do homework\", urgency: \"normal\", id: 3 }\r\n  ])\r\n\r\n  return(\r\n    <TasksContext.Provider value={{ tasks, dispatch }}>\r\n      {props.children}\r\n    </TasksContext.Provider>\r\n  )\r\n\r\n}\r\n\r\nexport default TasksContextProvider","import React, { useContext } from 'react'\r\nimport { TasksContext } from '../contexts/TasksContext'\r\n\r\nconst Header = () => {\r\n\r\n  const { tasks } = useContext(TasksContext)\r\n\r\n  return(\r\n    <header className=\"header\">\r\n      <h1>Tasks List</h1>\r\n      <h2>You have {tasks.length} tasks to accomplish!</h2>\r\n    </header>\r\n  )\r\n\r\n}\r\n\r\nexport default Header","import React, { useContext, useEffect, useState } from 'react'\r\nimport { TasksContext } from '../contexts/TasksContext'\r\n\r\nconst Task = ({ task }) => {\r\n\r\n  const { dispatch } = useContext(TasksContext)\r\n  const [color, setColor] = useState(task.urgency)\r\n\r\n  const backgroundColors = () => {\r\n\r\n    switch(color) {\r\n      case \"urgent\":\r\n        setColor(\"#9C8B3E\")\r\n        break\r\n      case \"normal\":\r\n        setColor(\"#D6BC42\")\r\n        break\r\n      case \"not_urgent\":\r\n        setColor(\"#FFE25F\")\r\n        break\r\n    }\r\n  }\r\n\r\n  useEffect (() => {\r\n    backgroundColors()\r\n  },[color])\r\n\r\n\r\n  return (\r\n    <li style={{backgroundColor: color}} className=\"task\"> \r\n      <div className=\"btns_container\">{task.name}</div>\r\n      {/* <div>{task.urgency}</div> */}\r\n      <div className=\"btns_container\">\r\n        <button onClick={() => dispatch({ type: 'DELETE_TASK', id: task.id })} className=\"btn\">Delete</button>\r\n        <button onClick={()=>setColor(\"urgent\")} className=\"semaphorus dark\"></button>\r\n        <button onClick={()=>setColor(\"normal\")} className=\"semaphorus medium\"></button>\r\n        <button onClick={()=>setColor(\"not_urgent\")} className=\"semaphorus light\"></button>\r\n      </div>\r\n    </li>\r\n  )\r\n\r\n}\r\n\r\nexport default Task","import React, { useContext } from 'react'\r\nimport { TasksContext } from '../contexts/TasksContext'\r\nimport Task from './Task'\r\n\r\nconst TasksList = () => {\r\n\r\n  const { tasks } = useContext(TasksContext)\r\n\r\n  return tasks.length ? (\r\n    <ul className=\"tasks_list\">\r\n      { tasks.map(task => {\r\n        return <Task task={task} key={task.id}/>\r\n      })}\r\n    </ul> ) : (<div>\"You have no tasks at the moment :)\"</div>)\r\n\r\n}\r\n\r\nexport default TasksList ","import React, { useContext, useState } from 'react';\r\nimport { TasksContext } from '../contexts/TasksContext';\r\n\r\nconst TaskForm = () => {\r\n\r\n  const { dispatch } = useContext(TasksContext)\r\n  const [name, setName] = useState('');\r\n  const [urgency, setUrgency] = useState('')\r\n\r\n  const assignUrgency = (e) => {\r\n    e.preventDefault()\r\n    setUrgency(e.target.id)\r\n  }\r\n\r\n  const createTask= (e) => {\r\n    e.preventDefault()\r\n    dispatch({ type: 'ADD_TASK', task: { name: name, urgency: urgency }})\r\n    setName('')\r\n    setUrgency('')\r\n\r\n  }\r\n\r\n\r\n  return(\r\n    <form className=\"form\">\r\n      <div className=\"btns_container\">\r\n        <input type=\"text\" placeholder=\" Add new task\" value={name} required\r\n        onChange={(e) => setName(e.target.value)}/>\r\n      </div>\r\n      <div className=\"btns_container\">\r\n        <button id=\"urgent\" onClick={(e) => assignUrgency(e)} className=\"semaphorus dark\"></button>\r\n        <button id=\"normal\" onClick={(e) => assignUrgency(e)} className=\"semaphorus medium\"></button>\r\n        <button id=\"not_urgent\" onClick={(e) => assignUrgency(e)} className=\"semaphorus light\"></button>\r\n        <button onClick={(e) => createTask(e)} className=\"btn\">Create</button>\r\n      </div>\r\n    </form>\r\n  )\r\n\r\n}\r\n\r\nexport default TaskForm","import React from 'react';\nimport TasksContextProvider from './contexts/TasksContext';\nimport Header from './components/Header'\nimport TasksList from './components/TasksList'\nimport TaskForm from './components/TaskForm'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <TasksContextProvider>\n        <Header />\n        <TasksList />\n        <TaskForm />\n      </TasksContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}